package com.newcoder.zuo3.advanced.class07;

public class unsolved_Code_04_MaxHappy {
    //树形DP
    //某公司要举办一次晚会， 每个参加晚会的人都不希望见到自己的直接上
    //司， 每个人有自己的活跃度， 和上下级的关系，
    //求邀请哪些人能使晚会的活跃度最大， 最后返回活跃度即可。
    //例子： 给定一个矩阵，
    //1 8
    //1 9
    //1 10
    //第0个数组为[1,8]， 表示0号员工的直接上级是1号员工， 活跃度是8
    //第1个数组为[1,9]， 表示1号员工的直接上级是1号员工（大老板， 头节
    //点） ， 活跃度是9
    //第2个数组为[1,10]， 表示2号员工的直接上级是1号员工， 活跃度是10
    //为了使气氛最活跃， 应该1不来， 0和2来， 活跃度为18， 返回18

    //使用树来做,这个数组其实就是一个树结构,多叉树
    //可能性1:A来,则为B不来的时候B的子树最大活跃度加上C不来C的子树最大活跃度再加上A的活跃度
    //可能性2:A不来:分别包括B,C来与不来的子树最大活跃度相加,那么此时B来和B不来哪个对应的活跃度大就是maxB,C来合不来哪个对应的活跃度大就是maxC,整体活跃度就是maxB+maxC




}

package com.newcoder.zuo3.advanced.class06;

public class unsolved_Code_06_ArtistProblem {
    //画匠问题
    //【题目】
    //给定一个整型数组arr， 数组中的每个值都为正数， 表示完成一幅画作需要的时间， 再给
    //定一个整数num表示画匠的数量， 每个画匠只能画连在一起的画作。 所有的画家并行工
    //作， 请返回完成所有的画作需要的最少时间。
    //【举例】
    //arr=[3,1,4]， num=2。
    //最好的分配方式为第一个画匠画3和1， 所需时间为4。 第二个画匠画4， 所需时间为4。
    //因为并行工作， 所以最少时间为4。 如果分配方式为第一个画匠画3， 所需时间为3。 第
    //二个画匠画1和4， 所需的时间为5。 那么最少时间为5， 显然没有第一种分配方式好。 所
    //以返回4。
    //arr=[1,1,1,4,3]， num=3。
    //最好的分配方式为第一个画匠画前三个1， 所需时间为3。 第二个画匠画4， 所需时间为4。
    //第三个画匠画3， 所需时间为3。 返回4。

    //本质就是num是要将这个数组分几块,分成的这几块都是连续的而且内部的累加和必须最小,也就是说每块的和都尽量小
    //但是解决问题要换一个思路,就是给定一个sum,切的每一块都不能大于这个sum最多能切多少块
    //比如画匠有k个,所有的数加在一起是sum,先看sum/2为目标能切多少块,如果块数小于k,
    // 说明标准松了,再变为sum/4看块数,如果大于k说明标准太严,0-sum/4都做不到,看sum/4-sum/2上再二分看块数,
    // 一直分到不能分位置,找最后一个达标块数的标准sum/?就是进行分块的标准值

}
